/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.icss.hit.bean.MeetingOrderBean;
import com.icss.hit.bean.OtherInfoBean;
import com.icss.hit.bean.interfaces.MeetingOrder;
import com.icss.hit.bean.interfaces.OtherInfo;
import com.icss.hit.component.PageBean;
import com.icss.hit.hibernate.vo.Room;
import com.icss.hit.hibernate.vo.RoomReg;

/** 
 * 搜索符合条件的会议室预约列表
 * Creation date: 08-08-2009
 * @author 朱金彪&赵颖申
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="meetingOrder.failed" path="/meeting/meetingOrder.jsp"
 * @struts.action-forward name="meetingOrder.succeed" path="/meeting/meetingOrder.jsp"
 */
public class MeetingOrderAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 当前登陆用户ID
		long userId=-1;
		if( request.getSession().getAttribute("UserId") != null ){
			userId = Long.parseLong(request.getSession().getAttribute("UserId").toString());
		}else{
			return mapping.findForward("NullLogin");
		}
		//会议室名字
		String name = null;
		//会议开始时间
		String beginTime = null;
		//会议结束时间
		String endTime = null;
		//会议室容纳人数
		int containNum = -1;
		//页面上显示的第几页
		int pageNo = 1;
		//为了容纳人数不为数字的时候，且查不到数据的时候，为保存containNum而使用的。
		String Num = request.getParameter("containNum");
		// 得到参数
		name = request.getParameter("name");
		beginTime = request.getParameter("beginTime");
		endTime = request.getParameter("endTime");
		try {
			if( name != null&&!name.equals("")){
				name = URLDecoder.decode(name,"UTF-8");
			}
			else name=null;
			String contain = request.getParameter("containNum");
			//验证是否为空，或者是否没有，或者是否不是数字
			if(contain!=null &&!contain.equals("")){
				if(!contain.matches("[1-9]\\d*"))containNum=1000000;    //为了让他不输入数字的时候不输出数据
				else containNum = Integer.parseInt(request.getParameter("containNum"));
			}
			else containNum=-1;
			if(beginTime!=null)
			{
				if(beginTime.equals("")){
					beginTime=null;
				}
				if(endTime.equals("")||endTime==null){
					endTime=null;
				}
			}
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			name = null;
			containNum = 100000;
		}
		
		try{
			pageNo = Integer.parseInt(request.getParameter("page"));
		}catch(Exception e){
			// 如果数据异常
			pageNo = 1;
		}
		
		// 所有人员的数量
		int count = 0;
		// 分页的数量
		int pageCount = 0;
		// 得到搜索的数据
		List<Room> list = null;
		MeetingOrder meeting = new MeetingOrderBean();
		// 得到总数和分页
		count = meeting.getAvailableRoomCount(name, containNum, beginTime, endTime);
		pageCount = meeting.getPageCount(count, MeetingOrderBean.PAGE_SIZE);
		//不为空的时候！！！！
		if(pageCount!=0)
		{
			// 设置页面的范围
			pageNo = pageNo < 1? 1:pageNo;
			pageNo = pageNo > pageCount? pageCount: pageNo;
				
			list = meeting.getAvailableRoom(pageNo, name, containNum, beginTime, endTime);
			request.setAttribute("availableRoomList", list);
						
			// 生成前面的页面显示
			PageBean pagebean = new PageBean();
			
			if(name!=null){
				pagebean.addParam("name=" + URLEncoder.encode(request.getParameter("name")));
			}
			if(request.getParameter("containNum")!=null){
				pagebean.addParam("containNum=" + containNum);
			}
			if(beginTime!=null){
				pagebean.addParam("beginTime=" + beginTime);
			}
			if(endTime!=null){
				pagebean.addParam("endTime=" + endTime );
			}
			pagebean.setLink("meetingOrder.do");
			pagebean.setTotal(pageCount);
			pagebean.setThispage(pageNo);
				
			request.setAttribute("pageString", pagebean.getPageString());
			request.setAttribute("searchName",name);
			request.setAttribute("searchContainNum",containNum);
			request.setAttribute("searchBeginTime",beginTime);
			request.setAttribute("searchEndTime",endTime);
		}
		//查处的数据为空的时候
		else{
			request.setAttribute("searchName",name);
			request.setAttribute("searchContainNum",Num);
			request.setAttribute("searchBeginTime",beginTime);
			request.setAttribute("searchEndTime",endTime);
			request.setAttribute("SeachNull", "查找为空！！没有数据！！");
		}
		
		return mapping.findForward("meetingOrder.succeed");
	}
}