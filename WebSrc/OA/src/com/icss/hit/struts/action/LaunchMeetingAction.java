/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.icss.hit.bean.MeetingLaunchBean;
import com.icss.hit.bean.MessageSaveBean;
import com.icss.hit.bean.RoomBean;
import com.icss.hit.bean.interfaces.MessageDao;
import com.icss.hit.bean.interfaces.meetingLaunchDao;
import com.icss.hit.hibernate.vo.Meeting;
import com.icss.hit.hibernate.vo.MeetingAttend;
import com.icss.hit.hibernate.vo.Message;
import com.icss.hit.hibernate.vo.ReceiverInfo;
import com.icss.hit.hibernate.vo.Room;
import com.icss.hit.hibernate.vo.SysUser;
import com.icss.hit.struts.form.LaunchMeetingForm;

/** 
 * 用于发起会议并向参与者发出站内信
 * Creation date: 08-09-2009
 * @author 赵颖申
 * XDoclet definition:
 * @struts.action path="/launchMeeting" name="launchMeetingForm" input="/meetingLaunch.do" scope="request" validate="true"
 */
public class LaunchMeetingAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		LaunchMeetingForm launchMeetingForm = (LaunchMeetingForm) form;// TODO Auto-generated method stub
		//会议参与人员ID的集合
		String idArray = launchMeetingForm.getIdArray();
		//会议标题
		String meetingTitle = launchMeetingForm.getMeetingTitle();
		//会议开始时间
		String beginTime = launchMeetingForm.getBeginTime();
		//会议结束时间
		String endTime = launchMeetingForm.getEndTime();
		//会议的主要内容
		String content = launchMeetingForm.getMeetingContent();
		//会议室的选择,会议室ID
		long meetingRoom = Long.parseLong(launchMeetingForm.getMeetingRoom());
		//用户，用Session来查看本人的信息
		long uid = 1;
		if( request.getSession().getAttribute("UserId") != null ){
			uid = Long.parseLong(request.getSession().getAttribute("UserId").toString());
		}else{
			return mapping.findForward("NullLogin");
		}
		//发给的人的ID,用于发给会议参与人员信息和用于会议MeetingAttend使用的
		idArray+=(","+uid);
		//用数组将会议参与人员ID的集合分开
		String[] Users;           
		Users = idArray.split(",");                        //分出来的用户ID
		//日期的转化
		Date begin = null;
		Date end = null;
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd kk:mm:ss");
		try{
			//开始时间
			if( beginTime != null ){
				begin = format.parse(beginTime);
			}
		}catch( Exception e ){
			begin = null;
		}
		// 结束时间
		try{
			if( endTime != null ){
				end = format.parse(endTime);
			}
		}catch( Exception e ){
			end = null;
		}
		//前面有的啊啊啊啊啊啊啊啊啊啊啊啊！！！注意了 啊啊啊啊啊啊
		Room room = new Room();
		room.setRId(meetingRoom);
		
		
		SysUser user = new SysUser();
		user.setSuId(uid);
		//meeting ID
		long mtID=-1;
		//插入参与人是否成功
		long resultAttend = -1;
		//以下用于开会的内容和所有信息的保存
		//设置开会信息的基本信息
		Meeting meeting = new Meeting();
		meeting.setMtTitle(meetingTitle);
		meeting.setMtContent(content);
		meeting.setMtBegintime(begin);
		meeting.setMtEndtime(end);
		meeting.setRoom(room);
		meeting.setSysUser(user);
		meetingLaunchDao meetingSave = new MeetingLaunchBean();
		
		mtID  = meetingSave.saveMeetingMessage(meeting); //保存会议信息用的，注意了啊啊啊啊！！！！
		if(mtID == -1)return mapping.findForward("launchMeeting.fail");
		
		//以下是输入参加会议的人
		for(int i = 0;i < Users.length; i++)
		{
			MeetingAttend meetingAttend = new MeetingAttend();
			//设置输入参加会议的人里面相关联的信息的ID号
			Meeting myMeeting = new Meeting();
			myMeeting.setMtId(mtID);
			meetingAttend.setMeeting(myMeeting);
			//设置参与人的ID
			SysUser sysUser = new SysUser();
			Long id;
			try
			{
				id = Long.parseLong(Users[i]);
			}
			catch(Exception ex)
			{
				ex.getStackTrace();
				return mapping.findForward("launchMeeting.fail");
			}
			sysUser.setSuId(id);
			meetingAttend.setSysUser(sysUser);
			resultAttend = meetingSave.saveMeetingUsers(meetingAttend);
			if(resultAttend == -1)return mapping.findForward("launchMeeting.fail");
		}
		
		
		//*********************************************************************
		//向用户发出站内信
		long mesID = -2;
		long ReciverID = -2;
		Long result;
		String riBox = "0";
		//利用当前用户的ID来封装成为SysUser来设定Message的发件人的ID
		//当前时间
		Date date = new Date();
		//发出的信息的内容
		String mesContent = "请参加会议<br/><br/>会议标题：" + meetingTitle +
							"<br/>会议时间：" + beginTime + "--" + endTime +
							"<br/>会议地点：" + new RoomBean().getRoom(meetingRoom).getRName() +
							"<br/>开会主要内容：" + content;
		//以下用于开会的信息的发送
		//设置信息的基本信息
		Message myMessage = new Message();
		myMessage.setMsTitle(meetingTitle);
		myMessage.setMsContent(mesContent);
		myMessage.setMsSendtime(date);
		myMessage.setSysUser(user);
		myMessage.setMsDelete("0");
		MessageDao messageSave = new MessageSaveBean();
		
		//这个地方可以直接发送站内信！！！！不用存草稿箱
		//标示新建所属信箱，1为发件箱，2为草稿箱,3为收件箱
		//储存在发件箱中，当用户想发送邮件是，放入发件箱，注意的是邮件的发送人的邮箱写的是发件箱，所有接收人的邮箱写的是收件箱
		riBox = "3";                                   //接收人的邮箱写的是收件箱    
		myMessage.setMsBox("1");                       //发送人的邮箱写的是发件箱
			
		
		mesID  = messageSave.saveReceiveMessage(myMessage); //保存信息用的，注意了啊啊啊啊！！！！
		if(mesID == -1)return mapping.findForward("launchMeeting.fail");
		
		//以下是输入信息的收件人，和收件人的所属邮箱
		for(int i = 0;i < Users.length; i++)
		{
			ReceiverInfo receiver = new ReceiverInfo();
			//设置收件人信息里面相关联的信息的ID号
			Message message = new Message();
			message.setMsId(mesID);
			receiver.setMessage(message);
			//设置接收人的邮箱
			receiver.setRiBox(riBox);
			//设置未读
			receiver.setRiRead("0");
			//设置未删除
			receiver.setRiDelete("0");
			//设置用户的ID
			SysUser sysUser = new SysUser();
			Long id;
			try
			{
				id = Long.parseLong(Users[i]);
			}
			catch(Exception ex)
			{
				ex.getStackTrace();
				return mapping.findForward("launchMeeting.fail");
			}
			sysUser.setSuId(id);
			receiver.setSysUser(sysUser);
			result = messageSave.saveReceiveUsers(receiver);
			if(result == -1)return mapping.findForward("launchMeeting.fail");
		}
		return mapping.findForward("launchMeeting.successd");
		
	}
}