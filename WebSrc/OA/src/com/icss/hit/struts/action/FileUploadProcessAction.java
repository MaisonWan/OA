/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionRedirect;

import ahxu.commons.upload.DiskFileUploadEx;

import com.icss.hit.bean.FileBean;
import com.icss.hit.bean.FileFolderBean;
import com.icss.hit.hibernate.vo.FileFolder;
import com.icss.hit.hibernate.vo.Files;

/**
 * 处理文件上传
 * MyEclipse Struts Creation date: 08-07-2009
 * @author 万里鹏
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="FileUploadProcess.error" path="/FileUpload.do"
 *                        redirect="true"
 * @struts.action-forward name="FileUploadProcess.succeed"
 *                        path="/FolderDetail.do"
 */
public class FileUploadProcessAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 当前用户ID
		long uid = 1;
		if( request.getSession().getAttribute("UserId") != null ){
			uid = Long.parseLong(request.getSession().getAttribute("UserId").toString());
		}else{
			return mapping.findForward("NullLogin");
		}
		// 得到要保存的文件夹ID
		String ffId = request.getParameter("ffid");
		long ff_id;
		try{
			ff_id = Long.parseLong(ffId);
		}catch( Exception e ){
			// 如果参数不合法,则跳转回去
			return mapping.findForward("FileUploadProcess.error");
		}
		FileFolder ff = new FileFolderBean().getFileFolder(ff_id,uid);
		
		// 如果没有访问该文件夹的权限，则返回
		if( ff == null ){

			return mapping.findForward("FileUploadProcess.error");
		}
		
		List fileItemList = null;
		String file_name = null;
		// 根据选择的文件夹构造存储文件的路径
		String uploadPath = request.getRealPath("/file/" + uid + "/") + "\\" + ff.getFfName() + "\\";

		DiskFileUploadEx fu = new DiskFileUploadEx();// 初始化ahxu扩展后的组件
		fu.setHeaderEncoding("UTF-8");
		try {
			fileItemList = fu.parseRequestEx(request);// ahxu扩展后的:接收上传文件
			Iterator fileItemListIte = fileItemList.iterator();
			while (fileItemListIte.hasNext()) {
				FileItem file = (FileItem) fileItemListIte.next();
				// 检查文件类型
				String name = file.getName();
				String typeName = name.substring(name.lastIndexOf(".") + 1 );
				/*// 转成小写
				
				
				if( !flag ){
					//request.setAttribute("uploaderror", "该文件类型不允许上传");
					System.out.println("出现错误3该文件类型不允许上传");
					return mapping.findForward("FileUploadProcess.error");
				}*/
				
				// 检查一下是否有文件超过大小限制的
				if ( file.getSize() > 5 * 1024 * 1024){
					request.setAttribute("uploaderror", "文件大小超过限制");
					return mapping.findForward("FileUploadProcess.error");
				}
				
				if (!file.isFormField() && file.getSize() > 0) {
				
					// 上传的文件名
					file_name = file.getName().substring(
							file.getName().lastIndexOf("\\") + 1);

					// 要上传文件的路径
					File filepath = new File(uploadPath);
					if (!filepath.exists()) {
						// 如果不存在则新建路径
						filepath.mkdir();
					}
					File savedFile = new File(uploadPath + file_name);
					// 如果该文件名已经存在
					int num = 1;
					String file_name_temp = file_name;
					while (savedFile.exists()) {
						file_name_temp = "(" + num + ")" + file_name;
						savedFile = new File(uploadPath + file_name_temp);
						num++;
					}
					file.write(savedFile);// 保存图片到指定的目录下
					
					// 将上传的文件名添加到数据库中
					FileFolder folder = new FileFolder();
					folder.setFfId(ff_id);
					Files f = new Files();
					f.setFileFolder(folder);
					f.setFName(file_name_temp);
					f.setFTime(new Date());
					new FileBean().addFile(f);
				}
			}
		} catch (Exception e) {
			request.setAttribute("uploaderror", "出现未知错误");
			return mapping.findForward("FileUploadProcess.error");
		} finally {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			fu.dispose();// ahxu扩展后的组件:接收上传文件后的清理工作，原有apache组件没有此过程
		}
		ActionRedirect rediect = new ActionRedirect(mapping.findForwardConfig("FileUploadProcess.succeed"));
		rediect.addParameter("id", ffId);
		return rediect;
	}
	/**
	 * 
	 * @param typeName
	 * @return
	 */
	private boolean checkFileType( String typeName ){
		typeName = typeName.toLowerCase();
		String[] list = new String[10];
		list[0] = "rar";
		list[1] = "zip";
		list[2] = "doc";
		list[3] = "docx";
		list[4] = "ppt";
		list[5] = "pptx";
		list[6] = "jpg";
		list[7] = "jpeg";
		list[8] = "bmp";
		list[9] = "gif";
		for( int i = 0; i < list.length; i++ ){
			String type = list[i];
			if( typeName.equals(type)){
				return true;
			}
		}
		return false;
	}
}