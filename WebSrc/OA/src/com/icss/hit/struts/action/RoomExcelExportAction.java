/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionRedirect;

import com.icss.hit.bean.OutputGraphBean;
import com.icss.hit.bean.interfaces.outputGraphDao;
import com.icss.hit.component.Excel;
import com.icss.hit.hibernate.vo.RoomReg;
import com.icss.hit.hibernate.vo.SysUser;
import com.icss.hit.struts.form.GraphOutputForm;

/** 
 * 导出会议室使用情况的ID
 * Creation date: 08-11-2009
 * @author 赵颖申
 * XDoclet definition:
 * @struts.action path="/roomExcelExport" name="graphOutputForm" input="/outputGraph.do" scope="request" validate="true"
 * @struts.action-forward name="roomExcelExport.successd" path="/outputGraph.do"
 * @struts.action-forward name="roomExcelExport.fail" path="/outputGraph.do"
 */
public class RoomExcelExportAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		GraphOutputForm graphOutputForm = (GraphOutputForm) form;// TODO Auto-generated method stub
		long uid=1;
		if( request.getSession().getAttribute("UserId") != null ){
			uid = Long.parseLong(request.getSession().getAttribute("UserId").toString());
		}else{
			return mapping.findForward("NullLogin");
		}
		
		String year = graphOutputForm.getYear();
		String month = graphOutputForm.getMonth();
		//传进来的年份
		int Year = Integer.parseInt(year);
		//传进来的月份
		int Month = Integer.parseInt(month);
		
		outputGraphDao outputGraph = new OutputGraphBean();
		
		int conflict = outputGraph.getRoomCount(Year, Month);
		if(conflict == -1||conflict == 0)
		{
			//这个地方加上pic原因是发生错误的时候，可以保持前面的数据,图片等等
			request.setAttribute("conflict", "对不起！！没有数据！！无法导出！！");
			request.setAttribute("pic", "pic");
			request.setAttribute("month", month);
			request.setAttribute("year", year);
			return mapping.findForward("roomExcelExport.fail");
		}

		List<RoomReg> roomRegs = new ArrayList<RoomReg>();
		
		roomRegs = outputGraph.getRoomRegs(Year, Month);
		if(roomRegs == null)
		{
			request.setAttribute("roomRegsErrors", "对不起！！查询错误！！");
			request.setAttribute("pic", "pic");
			request.setAttribute("month", month);
			request.setAttribute("year", year);
			return mapping.findForward("roomExcelExport.fail");
		}
		
		//执行到这个地方以后，那个房间申请的全部的信息就全部的取出来了！！
		
		try{
			//设置文件名
			Date date = new Date();
			String ExcelName = date.getTime() + "_" + uid + ".xls";
			Excel ex = new Excel();
			int sheetIndex = 0;
			String fileName = request.getRealPath("/excel/")  + "\\" + ExcelName;
			String SheetName = year+ "年"+month + "月" + "会议室申请";
			
			boolean result = false;
			//在指定路径下新建一个Excel文件。（创建一个Excel文件的第一步，必须。）
			result = ex.createExcel(fileName);
			//设置当前sheet工作薄的名称及sheet号（创建一个Excel文件的第二步，必须。）
			result = ex.setCurSheet(sheetIndex, SheetName);
			//创建文件成功！！！开始写入数据
			if(result)
			{
				//加入列的头部
				result = ex.setCellText(0, 0, "编号");
				result = ex.setCellText(1, 0, "主题");
				result = ex.setCellText(2, 0, "会议室名");
				result = ex.setCellText(3, 0, "申请人名");
				result = ex.setCellText(4, 0, "开始时间");
				result = ex.setCellText(5, 0, "结束时间");
				result = ex.setCellText(6, 0, "备注");
				result = ex.setCellText(7, 0, "内容");
				result = ex.setCellText(8, 0, "参与人数");
				for(int i=0;i<roomRegs.size() ;i++)            //上面取到的值
				{
					RoomReg roomReg = roomRegs.get(i);
					result = ex.setCellText(0, i+1, roomReg.getRrId().toString());
					result = ex.setCellText(1, i+1, roomReg.getRrTitle());
					result = ex.setCellText(2, i+1, roomReg.getRoom().getRId().toString());
					result = ex.setCellText(3, i+1, roomReg.getSysUser().getSuUsername());
					result = ex.setCellText(4, i+1, roomReg.getRrBegintime().toLocaleString());
					result = ex.setCellText(5, i+1, roomReg.getRrEndtime().toLocaleString());
					result = ex.setCellText(6, i+1, roomReg.getRrInfo());
					result = ex.setCellText(7, i+1, roomReg.getRrContent());
					result = ex.setCellText(8, i+1, roomReg.getRrAttendsum().toString());
				}
				result = ex.saveExcel();//保存Excel
			}
			
			ex.closeExcel();//关闭Excel
			if(!result)
			{
				//添加失败
				return mapping.findForward("roomExcelExport.fail");
				
			}
			
			
			// 带参数的页面跳转
			
			ActionRedirect redirect = new ActionRedirect(mapping.findForward("roomExcelExport.successd"));
			//将Month和pic一起传递，免得点了导出Excel之后，不能显示！！Month和pictures
			redirect.addParameter("pic", "pic");
			redirect.addParameter("month", month);
			redirect.addParameter("year", year);
			// 将生成的Excel文件名字传回
			redirect.addParameter("excel", ExcelName);
			return redirect;
		}catch(Exception e){
			e.printStackTrace();
			return mapping.findForward("roomExcelExport.fail");
		}
	}
}