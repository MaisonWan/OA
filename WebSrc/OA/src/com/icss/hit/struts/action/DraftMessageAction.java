/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.icss.hit.bean.MessageSaveBean;
import com.icss.hit.bean.interfaces.MessageDao;
import com.icss.hit.hibernate.vo.MessageReceivers;
import com.icss.hit.struts.form.DraftMessageForm;

/** 
 * 用于判断在草稿箱里面是点击删除还是点击的修改，删除就删除，修改就构造字符串来传递到另外一个Action处理显示
 * Creation date: 08-07-2009
 * @author 赵颖申
 * XDoclet definition:
 * @struts.action path="/draftMessage" name="draftMessageForm" input="/form/draftMessage.jsp" scope="request" validate="true"
 */
public class DraftMessageAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//从Form里面来的
		DraftMessageForm draftMessageForm = (DraftMessageForm) form;// TODO Auto-generated method stub
		//读取类型
		String type = draftMessageForm.getType();
		long mesID = -1;
		//读取信息的ＩＤ
		try{
		mesID = Long.parseLong(request.getParameter("mesID"));
		}
		catch(Exception ex)
		{
			mesID = -1;
			return mapping.findForward("draftMessage.fail");
		}
		
		MessageDao messageAlter = new MessageSaveBean();
		//删除记录・・・・
		if(type.equals("del"))
		{
			if(messageAlter.deleteDraftMessage(mesID))return mapping.findForward("draftMessage.Dsuccessd");
		}
		//修改数据・・
		else if(type.equals("alert"))
		{
			//获得信息的内容和信息的收件人ID
			MessageReceivers messageReceivers = messageAlter.getDraftMessage(mesID);
			String[] receivers;    //收件人姓名
			Long[] receiverIDs;    //收件人主键ID
			String[] empno;        //收件人的员工号
			String a="";            //收件人姓名String集合
			String b="";			//收件人主键ID String集合
			receivers = messageReceivers.getReceiverInfos();
			receiverIDs = messageReceivers.getReceiverIDs();
			empno = messageReceivers.getEmpno();
			//判断有没有收件人的信息
			if(receivers == null||receivers.length==0)
			{
				a = "";b="";
			}
			else
			{
				//构造显示的名字和ID的集合
				int len = receivers.length;
				for(int i=0;i< len;i++)
				{
					if(i != len-1)
					{
						a += (receivers[i] + "<"+ empno[i] +">" + ",");
						b += (receiverIDs[i] + ",");
					}
					else
					{
						a += (receivers[i] + "<"+ empno[i] +">");
						b += receiverIDs[i];
					}
				}
			}
			//如果对应MesID的信息有的话，设置内容，以便显示
			if(messageReceivers != null)
			{
				request.setAttribute("mesID", mesID);
				request.setAttribute("userIds", b);
				request.setAttribute("userNames", a);
				request.setAttribute("title", messageReceivers.getMsTitle());
				request.setAttribute("content", messageReceivers.getMsContent());
				return mapping.findForward("draftMessage.Asuccessd");
			}
			
		}
		return mapping.findForward("draftMessage.fail");
	}
}