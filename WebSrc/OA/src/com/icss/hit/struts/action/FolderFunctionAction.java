/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionRedirect;

import com.icss.hit.bean.FileFolderBean;
import com.icss.hit.bean.interfaces.FileFolderDao;
import com.icss.hit.hibernate.vo.FileFolder;
import com.icss.hit.hibernate.vo.SysUser;
import com.icss.hit.struts.form.FolderFunctionForm;

/** 
 * 对文件夹的一些处理，如对文件夹的删除，对文件夹的修改名称
 * Creation date: 08-08-2009
 * 
 * XDoclet definition:
 * @struts.action path="/FolderFunction" name="folderFunctionForm" input="/FolderDetail.do" scope="request" validate="true"
 * @struts.action-forward name="FolderFunction.succeed" path="/FolderDetail.do" redirect="true"
 */
public class FolderFunctionAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	@SuppressWarnings("deprecation")
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		FolderFunctionForm folderFunctionForm = (FolderFunctionForm) form;// TODO Auto-generated method stub
		// 用户Id
		long uid = 1;
		if( request.getSession().getAttribute("UserId") != null ){
			uid = Long.parseLong(request.getSession().getAttribute("UserId").toString());
		}else{
			return mapping.findForward("NullLogin");
		}
		String flag = folderFunctionForm.getFlag();
		String folderId = folderFunctionForm.getFolderId();
		System.out.println("flag"+flag);
		long ffId = Long.parseLong(folderId);
		FileFolderDao folderdao = new FileFolderBean();
		// 如果设文件夹为私有
		if( flag.equals("noshare")){
			folderdao.setFolderShare(ffId, false);
			// 返回刚才操作的文件夹
			ActionRedirect redirect = new ActionRedirect(mapping.findForward("FolderFunction.succeed"));
			redirect.addParameter("id", ffId);
			return redirect;
		}
		// 设置文件夹为共享
		else if( flag.equals("share")){
			folderdao.setFolderShare(ffId, true);
			// 返回刚才操作的文件夹
			ActionRedirect redirect = new ActionRedirect(mapping.findForward("FolderFunction.succeed"));
			redirect.addParameter("id", ffId);
			return redirect;
		}
		// 如果删除该文件夹
		else if( flag.equals("delete")){
			// 得到要删除的文件夹目录
			String folderPath = request.getRealPath("/file/" + uid + "/")
			+ "\\" + folderdao.getFileFolder(ffId, uid).getFfName() + "\\";
			System.out.println(folderPath);
			// 删除硬盘目录中的文件夹
			try {
				folderdao.deleteFolder(folderPath);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// 删除数据库中的文件夹
			FileFolder folder = new FileFolder();
			// 设置文件夹的主键
			folder = folderdao.getFileFolder(ffId, uid);
			folderdao.deleteFolder(folder);
		}
		return mapping.findForward("FolderFunction.succeed");
	}
}