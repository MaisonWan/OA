/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.icss.hit.struts.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.icss.hit.bean.DepartmentBean;
import com.icss.hit.bean.OtherInfoBean;
import com.icss.hit.bean.interfaces.Department;
import com.icss.hit.bean.interfaces.OtherInfo;
import com.icss.hit.component.PageBean;
import com.icss.hit.hibernate.vo.SysDept;
import com.icss.hit.hibernate.vo.SysUser;

/** 
 * AddressInfoAction用于输出公司通讯录的信息，同时也输出查询后显示查询的公司通讯录的消息，同时会保存查询的时候查询的内容
 * Creation date: 08-05-2009
 * @author 赵颖申
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="addressInfo.successd" path="/address/address.jsp"
 * @struts.action-forward name="addressInfo.fail" path="/address/address.jsp"
 */
public class AddressInfoAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form    前面来的表单
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//部门信息数据库操作类
		Department deptm = new DepartmentBean();
		// 得到所有的部门信息
		List<SysDept> deptList = deptm.getAllDept();
		//将查询出来的部门信息设置到request中去，以便在对应的JSP页面显示对应的内容
		request.setAttribute("deptList",deptList);
		//设置用于查询使用的参数
		String sexUrl = null;
		String type = null;
		String key = null;
		String sex = null;
		Object noexcel = null;     //为了没有数据的时候想要导出Excel的时候，告知用户没有数据，无法导出
		int dept = -1;
		int pageNo = 1;
		
		// 得到查询参数
		type = request.getParameter("type");
		key = request.getParameter("key");
		sex = request.getParameter("sex");
		noexcel = request.getAttribute("NoExcel");
		//发现没有数据的时候
		if(noexcel != null)
		{
			//为了查询的时候发生查询没有数据的时候，保存好查询的条件
			request.setAttribute("searchKey",key);
			request.setAttribute("searchType",type);
			request.setAttribute("searchSex",sex);
			request.setAttribute("searchDept",dept);
			request.setAttribute("NoExcel", "对不起！！没有数据，无法导出！！");//告知用户没有数据
			return mapping.findForward("addressInfo.fail");        //转向页面
		}
		//有数据的时候，向下执行
		try {
			//查询的姓名或员工号内容不为空的
			if( key != null){
				key = URLDecoder.decode(key,"UTF-8");   //将key的内容解码
			}
			//查询的性别内容不为空的
			if( sex != null)
				sex = URLDecoder.decode(sex, "UTF-8");   //将中文sex解码
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
			key = null;               //出错以后设为空，为了后面的查询的判断
		}
		//将部门的部门号给读取，读取出错归值-1
		try{
			dept = Integer.parseInt(request.getParameter("dept"));
		}catch(Exception e){
			// 如果数据异常
			dept = -1;
		}
		//将页面号给读取，读取出错归值1
		try{
			pageNo = Integer.parseInt(request.getParameter("page"));
		}catch(Exception e){
			// 如果数据异常
			pageNo = 1;
		}
		
		// 所有人员的数量
		int count = 0;
		// 分页的数量
		int pageCount = 0;
		// 得到搜索的数据
		List<SysUser> list = null;
		if( type != null && key != null && sex != null && dept != -1&&key.trim()!=""){
			OtherInfo info = new OtherInfoBean();
			
			// 得到总数和分页
			count = info.getSearchedUserCount(type, key, sex, dept);
			pageCount = info.getPageConut(count, OtherInfoBean.PAGE_SIZE);
			
			// 设置页面的范围
			pageNo = pageNo < 1? 1:pageNo;
			pageNo = pageNo > count? count: pageNo;
			
			list = info.getSearchedUserInfo(type, key, sex, dept, pageNo);
			request.setAttribute("searchAddressInfo", list);
						
			// 生成前面的页面显示
			PageBean pagebean = new PageBean();
			pagebean.addParam("type=" + type );
			
			pagebean.addParam("key=" + URLEncoder.encode(request.getParameter("key")));
			pagebean.addParam("sex=" + URLEncoder.encode(request.getParameter("sex")));
			
			pagebean.addParam("dept=" + dept );
			pagebean.setLink("addressInfo.do");
			pagebean.setTotal(pageCount);
			pagebean.setThispage(pageNo);
			
			request.setAttribute("pageString", pagebean.getPageString());
			//设置你查询的时候查询的内容，为了在查询的时候，页面转向的时候不将你的查询内容给清空
			request.setAttribute("searchKey",key);
			request.setAttribute("searchType",type);
			request.setAttribute("searchSex",sex);
			request.setAttribute("searchDept",dept);
		}
		else{
			//如果出现问题，清空sex和dept
			if(sex == null)sex = "0";
			if(dept == -1)dept = 0;
			OtherInfo info = new OtherInfoBean();
			// 得到总数和分页
			count = info.getAllUserCount(sex, dept);
			pageCount = info.getPageConut(count, OtherInfoBean.PAGE_SIZE);
			// 设置页面的范围
			pageNo = pageNo < 1? 1:pageNo;
			pageNo = pageNo > count? count: pageNo;
			
			list = info.getAllUserInfo(sex, dept, pageNo);
			request.setAttribute("searchAddressInfo", list);
			try {
				sexUrl = URLEncoder.encode(sex, "UTF-8");   //加码，一边传输
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			// 生成前面的页面显示
			PageBean pagebean = new PageBean();
			pagebean.addParam("sex=" + URLEncoder.encode(sexUrl));
			pagebean.addParam("dept=" + dept );
			pagebean.setLink("addressInfo.do");
			pagebean.setTotal(pageCount);
			pagebean.setThispage(pageNo);
			
			request.setAttribute("pageString", pagebean.getPageString());
			//设置你查询的时候查询的内容，为了在查询的时候，页面转向的时候不将你的查询内容给清空
			request.setAttribute("searchSex",sex);
			request.setAttribute("searchDept",dept);
			
		}
		//判断查没查出数据，生没生成Excel，如果生成了就将ExcelName传过去
		if( request.getParameter("excel") != null ){
			request.setAttribute("ExcelName", request.getParameter("excel"));
		}
		//转向
		return mapping.findForward("addressInfo.successd");
	}
}